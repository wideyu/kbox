name: kboxjson
on: 
  push:
  schedule:
    - cron: '* */1 * * *'
  workflow_dispatch:
    
jobs:

  my-job:

    name: My Job

    runs-on: ubuntu-latest

    environment:
      name: github-pages    
    
    steps:

    - uses: actions/checkout@v2

    - name: Print a greeting

      env:
        TOKEN: ${{ secrets.GITHUB_TOKEN }}
        URLMK: ${{ secrets.URLMK }}
        WWW: ${{ secrets.WWW }}
        GATEWAY: ${{ secrets.GATEWAY }}
        
      run: |
        [ -d fmlist ] || mkdir fmlist
        pagesize=1
        pageindex=1
        urllist="$URLMK/fmList.php?pagesize=$pagesize&pageindex=$pageindex";
        jsonlist=$(curl -s "$urllist")
        [[ $jsonlist == \"* ]] && jsonlist=$(eval echo "$jsonlist")
        echo $urllist
        echo $jsonlist
        main="def main():
          import sys, json
          print(json.load(sys.stdin)['recordcount'])"
        py=$(echo -e "$main\nmain()")
        echo $py
        pagesize=$(echo "$jsonlist" | python3 -c "$py")
        echo $pagesize
        urllist="$URLMK/fmList.php?pagesize=$pagesize&pageindex=$pageindex"
        jsonlist=$(curl -s "$urllist")
        [[ $jsonlist == \"* ]] && jsonlist=$(eval echo "$jsonlist")
        echo $jsonlist > "fmlist/$pageindex.json" 
        
        urllist="$WWW/fmweb/html/index.html"
        jsonlist=$(curl -s "$urllist"|grep 'var radioData ='|sed 's/^var radioData = /{"data":/;s/;$/}/')
        echo $jsonlist > "fmlist.json"

        [ -d fmsongs ] || mkdir fmsongs

        main="def main():
          import sys, json
          fmlist=json.load(sys.stdin)
          for fm in fmlist['data']:
            print(fm['fmid'])"
        py=$(echo -e "$main\nmain()")
        #echo "$jsonlist"
        echo "$py"
        loop="YES"
        for fmid in $(echo "$jsonlist" | python3 -c "$py")
        do
          [ -z $loop ] && break
          echo "$fmid"
          offset="0"
          for pageindex in {1..3}
          do
            [ -z $loop ] && break
            #$URLMK/fmSongs.php?size=20&fmid=$fmid&offset=$offset
            if [ -z $"offset" ]; then
              urlsongs="$GATEWAY/openapicdn/broadcast/v2/get_songlist?radio_id=73&offset=0&pagesize=20"
            else
              urlsongs="$GATEWAY/openapicdn/broadcast/v2/get_songlist?radio_id=73&offset=$offset&pagesize=20"
            fi
            jsonsongs=$(curl -s "$urlsongs")
            [[ $jsonsongs == \"* ]] && jsonsongs=$(eval echo "$jsonsongs")
            main="def main():
              import sys, json
              fmsongs=json.load(sys.stdin)
              if fmsongs['data']['songlist'] is None:
                print("0")
              else:
                print(len(fmsongs['data']['songlist']))"
            py=$(echo -e "$main\nmain()")
            lensongs=$(echo "$jsonsongs" | python3 -c "$py")
            echo "$lensongs"
            if [ "$lensongs" == "0" ]; then
              [ -d "fmsongs/$fmid" ] && rm -rf "fmsongs/$fmid"
            else
              [ -d "fmsongs/$fmid" ] || mkdir "fmsongs/$fmid"
              filesongs="fmsongs/$fmid/$pageindex.json"
              echo $jsonsongs > "$filesongs"
                #if echo "$jsonhash" | grep -q '"error":"您操作太频繁了，请稍后再试"'; then
                #  loop=""
                #  echo "QUIT"
                #fi
                #sleep 10
            fi
            
            main="def main():
              import sys, json
              fmsongs=json.load(sys.stdin)
              print(fmsongs['data']['offset'])"
            py=$(echo -e "$main\nmain()")
            offset=$(echo "$jsonsongs" | python3 -c "$py")
            #offset=$(grep -o 'offset[^,]*\",' "$fsongs" |grep -o '%7B.*%7D')
            echo "$offset"
          done
        done

        curl -k -o bing.json "https://bing.com/HPImageArchive.aspx?format=js&idx=0&n=8"
        curl -k -o pixabay.json "${{ secrets.PIXABAY }}"
        if [ $? -eq 0 ]; then
          sed -i 's|\"largeImageURL"|\"_largeImageURL"|g' pixabay.json
          sed -i 's|\"previewURL"|\"largeImageURL"|g' pixabay.json
          sed -i 's|\_150.jpg|\_960_720.jpg|g' pixabay.json
        fi
        curl -k -o vladstudio.json "https://vlad.studio/api/v3/art/?client=${{ secrets.VLADSTUDIO }}&format=json&has_wall=1&limit=600"
        if [ $? -eq 0 ]; then
          sed -i 's|api\\\/v3\\\/download?client=.\{24\}&filename|ajax-download-wallpaper-image\\\/?filename|g' vladstudio.json
          sed -i 's|\&size=1600x1200|\&size=1920x1080|g' vladstudio.json
        fi
        curl -k -o unsplash.json "${{ secrets.UNSPLASH }}1"
        if [ $? -eq 0 ]; then
          for p in 2 3 4 5 6 ; do
            curl -k -o unsplash_tmp.json "${{ secrets.UNSPLASH }}$p"
            if [ $? -eq 0 ]; then
              json=$(cat unsplash.json)
              json=${json%*\]}
              tmp=$(cat unsplash_tmp.json)
              tmp=${tmp#*\[}
              echo "$json,$tmp" > unsplash.json
            fi
          done
        fi

    - name: Cleanup
      run: |
          rm -f upload.txt
          rm -f unsplash_tmp.json
          
    - name: Commit
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
          commit_message: "Action Auto"
